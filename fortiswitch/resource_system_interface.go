// Copyright 2023 Fortinet, Inc. All rights reserved.
// Author:
// Hongbin Lu (@fgtdev-hblu), Xing Li (@lix-fortinet), Jie Xue (@JieX19)
// Documentation:
// Hongbin Lu (@fgtdev-hblu), Xing Li (@lix-fortinet), Jie Xue (@JieX19)
// Yue Wang (@yuew-ftnt), Liang Liu (@Liang_FTNT)

// Description: Configure interfaces.

package fortiswitch

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
)

func resourceSystemInterface() *schema.Resource {
	return &schema.Resource{
		Create: resourceSystemInterfaceCreate,
		Read:   resourceSystemInterfaceRead,
		Update: resourceSystemInterfaceUpdate,
		Delete: resourceSystemInterfaceDelete,

		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},

		Schema: map[string]*schema.Schema{
			"autogenerated": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"defaultgw": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"gwdetect": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"dhcp_client_status": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"weight": &schema.Schema{
				Type:         schema.TypeInt,
				ValidateFunc: validation.IntBetween(0, 255),
				Optional:     true,
				Computed:     true,
			},
			"ip": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"vrrp_virtual_mac": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"bfd_detect_mult": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
				Computed: true,
			},
			"bfd_required_min_rx": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
				Computed: true,
			},
			"l2_interface": &schema.Schema{
				Type:         schema.TypeString,
				ValidateFunc: validation.StringLenBetween(0, 63),
				Optional:     true,
				Computed:     true,
			},
			"src_check_allow_default": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"dhcp_relay_ip": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"forward_domain": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
				Computed: true,
			},
			"speed": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"vlanforward": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"priority": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
				Computed: true,
			},
			"bfd": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"macaddr": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"bfd_desired_min_tx": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
				Computed: true,
			},
			"switch": &schema.Schema{
				Type:         schema.TypeString,
				ValidateFunc: validation.StringLenBetween(0, 15),
				Optional:     true,
				Computed:     true,
			},
			"vlanid": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
				Computed: true,
			},
			"cli_conn_status": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"detectserver": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"vrrp": &schema.Schema{
				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"status": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"priority": &schema.Schema{
							Type:         schema.TypeInt,
							ValidateFunc: validation.IntBetween(1, 255),
							Optional:     true,
							Computed:     true,
						},
						"adv_interval": &schema.Schema{
							Type:         schema.TypeInt,
							ValidateFunc: validation.IntBetween(1, 255),
							Optional:     true,
							Computed:     true,
						},
						"start_time": &schema.Schema{
							Type:         schema.TypeInt,
							ValidateFunc: validation.IntBetween(1, 255),
							Optional:     true,
							Computed:     true,
						},
						"backup_vmac_fwd": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"vrid": &schema.Schema{
							Type:         schema.TypeInt,
							ValidateFunc: validation.IntBetween(1, 255),
							Optional:     true,
							Computed:     true,
						},
						"vrgrp": &schema.Schema{
							Type:         schema.TypeInt,
							ValidateFunc: validation.IntBetween(1, 65535),
							Optional:     true,
							Computed:     true,
						},
						"preempt": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"version": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"vrdst": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"vrip": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
					},
				},
			},
			"allowaccess": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"dhcp_client_identifier": &schema.Schema{
				Type:         schema.TypeString,
				ValidateFunc: validation.StringLenBetween(0, 48),
				Optional:     true,
				Computed:     true,
			},
			"ping_serv_status": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
				Computed: true,
			},
			"type": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"snmp_index": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
				Computed: true,
			},
			"icmp_redirect": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"dhcp_relay_option82": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"description": &schema.Schema{
				Type:         schema.TypeString,
				ValidateFunc: validation.StringLenBetween(0, 63),
				Optional:     true,
				Computed:     true,
			},
			"remote_ip": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"dns_server_override": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"secondary_ip": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"vrf": &schema.Schema{
				Type:         schema.TypeString,
				ValidateFunc: validation.StringLenBetween(0, 35),
				Optional:     true,
				Computed:     true,
			},
			"dhcp_expire": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
				Computed: true,
			},
			"interface": &schema.Schema{
				Type:         schema.TypeString,
				ValidateFunc: validation.StringLenBetween(0, 15),
				Optional:     true,
				Computed:     true,
			},
			"dhcp_vendor_specific_option": &schema.Schema{
				Type:         schema.TypeString,
				ValidateFunc: validation.StringLenBetween(0, 35),
				Optional:     true,
				Computed:     true,
			},
			"vdom": &schema.Schema{
				Type:         schema.TypeString,
				ValidateFunc: validation.StringLenBetween(0, 11),
				Optional:     true,
				Computed:     true,
			},
			"dhcp_relay_service": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"distance": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
				Computed: true,
			},
			"name": &schema.Schema{
				Type:         schema.TypeString,
				ValidateFunc: validation.StringLenBetween(0, 15),
				ForceNew:     true,
				Optional:     true,
				Computed:     true,
			},
			"detectprotocol": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"src_check": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"ipv6": &schema.Schema{
				Type:     schema.TypeList,
				Optional: true,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"ip6_allowaccess": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"ip6_retrans_time": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
							Computed: true,
						},
						"vrrp6": &schema.Schema{
							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"status": &schema.Schema{
										Type:     schema.TypeString,
										Optional: true,
										Computed: true,
									},
									"priority": &schema.Schema{
										Type:         schema.TypeInt,
										ValidateFunc: validation.IntBetween(1, 255),
										Optional:     true,
										Computed:     true,
									},
									"vrip6": &schema.Schema{
										Type:     schema.TypeString,
										Optional: true,
										Computed: true,
									},
									"adv_interval": &schema.Schema{
										Type:         schema.TypeInt,
										ValidateFunc: validation.IntBetween(1, 255),
										Optional:     true,
										Computed:     true,
									},
									"start_time": &schema.Schema{
										Type:         schema.TypeInt,
										ValidateFunc: validation.IntBetween(1, 255),
										Optional:     true,
										Computed:     true,
									},
									"vrid": &schema.Schema{
										Type:         schema.TypeInt,
										ValidateFunc: validation.IntBetween(1, 255),
										Optional:     true,
										Computed:     true,
									},
									"vrgrp": &schema.Schema{
										Type:         schema.TypeInt,
										ValidateFunc: validation.IntBetween(1, 65535),
										Optional:     true,
										Computed:     true,
									},
									"preempt": &schema.Schema{
										Type:     schema.TypeString,
										Optional: true,
										Computed: true,
									},
									"accept_mode": &schema.Schema{
										Type:     schema.TypeString,
										Optional: true,
										Computed: true,
									},
									"vrdst6": &schema.Schema{
										Type:     schema.TypeString,
										Optional: true,
										Computed: true,
									},
								},
							},
						},
						"ip6_other_flag": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"ip6_dns_server_override": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"vrip6_link_local": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"ip6_address": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"ip6_prefix_list": &schema.Schema{
							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"valid_life_time": &schema.Schema{
										Type:     schema.TypeInt,
										Optional: true,
										Computed: true,
									},
									"prefix": &schema.Schema{
										Type:     schema.TypeString,
										Optional: true,
										Computed: true,
									},
									"autonomous_flag": &schema.Schema{
										Type:     schema.TypeString,
										Optional: true,
										Computed: true,
									},
									"onlink_flag": &schema.Schema{
										Type:     schema.TypeString,
										Optional: true,
										Computed: true,
									},
									"preferred_life_time": &schema.Schema{
										Type:     schema.TypeInt,
										Optional: true,
										Computed: true,
									},
								},
							},
						},
						"ip6_link_mtu": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
							Computed: true,
						},
						"ip6_manage_flag": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"ip6_min_interval": &schema.Schema{
							Type:         schema.TypeInt,
							ValidateFunc: validation.IntBetween(3, 1350),
							Optional:     true,
							Computed:     true,
						},
						"ip6_mode": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"ip6_hop_limit": &schema.Schema{
							Type:         schema.TypeInt,
							ValidateFunc: validation.IntBetween(0, 255),
							Optional:     true,
							Computed:     true,
						},
						"ip6_reachable_time": &schema.Schema{
							Type:         schema.TypeInt,
							ValidateFunc: validation.IntBetween(0, 3600000),
							Optional:     true,
							Computed:     true,
						},
						"ip6_extra_addr": &schema.Schema{
							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"prefix": &schema.Schema{
										Type:     schema.TypeString,
										Optional: true,
										Computed: true,
									},
								},
							},
						},
						"ip6_default_life": &schema.Schema{
							Type:         schema.TypeInt,
							ValidateFunc: validation.IntBetween(0, 9000),
							Optional:     true,
							Computed:     true,
						},
						"ip6_max_interval": &schema.Schema{
							Type:         schema.TypeInt,
							ValidateFunc: validation.IntBetween(4, 1800),
							Optional:     true,
							Computed:     true,
						},
						"vrrp_virtual_mac6": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"ip6_unknown_mcast_to_cpu": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"ip6_send_adv": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"autoconf": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"dhcp6_information_request": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
					},
				},
			},
			"dynamicgw": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"mtu_override": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"mtu": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
				Computed: true,
			},
			"dynamic_dns1": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"alias": &schema.Schema{
				Type:         schema.TypeString,
				ValidateFunc: validation.StringLenBetween(0, 25),
				Optional:     true,
				Computed:     true,
			},
			"auth_type": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"dynamic_dns2": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"status": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"mode": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"ha_priority": &schema.Schema{
				Type:         schema.TypeInt,
				ValidateFunc: validation.IntBetween(1, 50),
				Optional:     true,
				Computed:     true,
			},
			"secondaryip": &schema.Schema{
				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"gwdetect": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"detectprotocol": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"ip": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"detectserver": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"allowaccess": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"ping_serv_status": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
							Computed: true,
						},
						"ha_priority": &schema.Schema{
							Type:         schema.TypeInt,
							ValidateFunc: validation.IntBetween(1, 50),
							Optional:     true,
							Computed:     true,
						},
						"id": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
							Computed: true,
						},
					},
				},
			},
			"switch_members": &schema.Schema{
				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"member_name": &schema.Schema{
							Type:         schema.TypeString,
							ValidateFunc: validation.StringLenBetween(0, 63),
							Optional:     true,
							Computed:     true,
						},
					},
				},
			},
			"dynamic_sort_subtable": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Default:  "false",
			},
		},
	}
}

func resourceSystemInterfaceCreate(d *schema.ResourceData, m interface{}) error {
	c := m.(*FortiClient).Client
	c.Retries = 1

	obj, err := getObjectSystemInterface(d, c.Fv)
	if err != nil {
		return fmt.Errorf("Error creating SystemInterface resource while getting object: %v", err)
	}

	var o map[string]interface{}
	v, _ := d.GetOk("type")
	ag, _ := d.GetOk("autogenerated")
	if v == "physical" || ag == "auto" {
		o, err = c.UpdateSystemInterface(obj, (*obj)["name"].(string))
	} else {
		o, err = c.CreateSystemInterface(obj)
	}

	if err != nil {
		return fmt.Errorf("Error creating SystemInterface resource: %v", err)
	}

	if o["mkey"] != nil && o["mkey"] != "" {
		d.SetId(o["mkey"].(string))
	} else {
		d.SetId("SystemInterface")
	}

	return resourceSystemInterfaceRead(d, m)
}

func resourceSystemInterfaceUpdate(d *schema.ResourceData, m interface{}) error {
	mkey := d.Id()
	c := m.(*FortiClient).Client
	c.Retries = 1

	obj, err := getObjectSystemInterface(d, c.Fv)
	if err != nil {
		return fmt.Errorf("Error updating SystemInterface resource while getting object: %v", err)
	}

	o, err := c.UpdateSystemInterface(obj, mkey)
	if err != nil {
		return fmt.Errorf("Error updating SystemInterface resource: %v", err)
	}

	log.Printf(strconv.Itoa(c.Retries))
	if o["mkey"] != nil && o["mkey"] != "" {
		d.SetId(o["mkey"].(string))
	} else {
		d.SetId("SystemInterface")
	}

	return resourceSystemInterfaceRead(d, m)
}

func resourceSystemInterfaceDelete(d *schema.ResourceData, m interface{}) error {
	mkey := d.Id()

	c := m.(*FortiClient).Client
	c.Retries = 1

	v, _ := d.GetOk("type")
	ag, _ := d.GetOk("autogenerated")
	if v == "physical" || ag == "auto" {
		d.SetId("")
		return nil
	}

	err := c.DeleteSystemInterface(mkey)
	if err != nil {
		return fmt.Errorf("Error deleting SystemInterface resource: %v", err)
	}

	d.SetId("")

	return nil
}

func resourceSystemInterfaceRead(d *schema.ResourceData, m interface{}) error {
	mkey := d.Id()

	c := m.(*FortiClient).Client
	c.Retries = 1

	o, err := c.ReadSystemInterface(mkey)
	if err != nil {
		return fmt.Errorf("Error reading SystemInterface resource: %v", err)
	}

	if o == nil {
		log.Printf("[WARN] resource (%s) not found, removing from state", d.Id())
		d.SetId("")
		return nil
	}

	err = refreshObjectSystemInterface(d, o, c.Fv)
	if err != nil {
		return fmt.Errorf("Error reading SystemInterface resource from API: %v", err)
	}
	return nil
}

func flattenSystemInterfaceDefaultgw(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceGwdetect(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceDhcpClientStatus(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceWeight(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIp(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	if v1, ok := d.GetOkExists(pre); ok && v != nil {
		if s, ok := v1.(string); ok {
			v = validateConvIPMask2CIDR(s, v.(string))
			return v
		}
	}

	return v
}

func flattenSystemInterfaceVrrpVirtualMac(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceBfdDetectMult(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceBfdRequiredMinRx(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceL2Interface(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceSrcCheckAllowDefault(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceDhcpRelayIp(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	var temp_v = v.(string)
	temp_v = strings.TrimRight(temp_v, " ")
	temp_v = strings.ReplaceAll(temp_v, "\"", "")
	var rst_v interface{} = temp_v
	return rst_v
}

func flattenSystemInterfaceForwardDomain(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceSpeed(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceVlanforward(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfacePriority(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceBfd(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceMacaddr(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceBfdDesiredMinTx(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceSwitch(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceVlanid(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceCliConnStatus(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceDetectserver(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceVrrp(v interface{}, d *schema.ResourceData, pre string, sv string) []map[string]interface{} {
	if v == nil {
		return nil
	}

	if _, ok := v.([]interface{}); !ok {
		log.Printf("[DEBUG] Argument %v is not type of []interface{}.", pre)
		return nil
	}

	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil
	}

	result := make([]map[string]interface{}, 0, len(l))

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})

		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "status"
		if _, ok := i["status"]; ok {

			tmp["status"] = flattenSystemInterfaceVrrpStatus(i["status"], d, pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "priority"
		if _, ok := i["priority"]; ok {

			tmp["priority"] = flattenSystemInterfaceVrrpPriority(i["priority"], d, pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "adv_interval"
		if _, ok := i["adv-interval"]; ok {

			tmp["adv_interval"] = flattenSystemInterfaceVrrpAdvInterval(i["adv-interval"], d, pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "start_time"
		if _, ok := i["start-time"]; ok {

			tmp["start_time"] = flattenSystemInterfaceVrrpStartTime(i["start-time"], d, pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "backup_vmac_fwd"
		if _, ok := i["backup-vmac-fwd"]; ok {

			tmp["backup_vmac_fwd"] = flattenSystemInterfaceVrrpBackupVmacFwd(i["backup-vmac-fwd"], d, pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrid"
		if _, ok := i["vrid"]; ok {

			tmp["vrid"] = flattenSystemInterfaceVrrpVrid(i["vrid"], d, pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrgrp"
		if _, ok := i["vrgrp"]; ok {

			tmp["vrgrp"] = flattenSystemInterfaceVrrpVrgrp(i["vrgrp"], d, pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "preempt"
		if _, ok := i["preempt"]; ok {

			tmp["preempt"] = flattenSystemInterfaceVrrpPreempt(i["preempt"], d, pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "version"
		if _, ok := i["version"]; ok {

			tmp["version"] = flattenSystemInterfaceVrrpVersion(i["version"], d, pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrdst"
		if _, ok := i["vrdst"]; ok {

			tmp["vrdst"] = flattenSystemInterfaceVrrpVrdst(i["vrdst"], d, pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrip"
		if _, ok := i["vrip"]; ok {

			tmp["vrip"] = flattenSystemInterfaceVrrpVrip(i["vrip"], d, pre_append, sv)
		}

		result = append(result, tmp)

		con += 1
	}

	dynamic_sort_subtable(result, "vrid", d)
	return result
}

func flattenSystemInterfaceVrrpStatus(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceVrrpPriority(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceVrrpAdvInterval(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceVrrpStartTime(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceVrrpBackupVmacFwd(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceVrrpVrid(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceVrrpVrgrp(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceVrrpPreempt(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceVrrpVersion(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceVrrpVrdst(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceVrrpVrip(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceAllowaccess(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceDhcpClientIdentifier(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfacePingServStatus(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceType(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceSnmpIndex(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIcmpRedirect(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceDhcpRelayOption82(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceDescription(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceRemoteIp(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceDnsServerOverride(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceSecondaryIp(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceVrf(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceDhcp_Expire(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceInterface(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceDhcpVendorSpecificOption(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceVdom(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceDhcpRelayService(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceDistance(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceName(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceDetectprotocol(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceSrcCheck(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6(v interface{}, d *schema.ResourceData, pre string, sv string) []map[string]interface{} {
	if v == nil {
		return nil
	}

	i := v.(map[string]interface{})
	result := make(map[string]interface{})

	pre_append := "" // complex
	pre_append = pre + ".0." + "ip6_allowaccess"
	if _, ok := i["ip6-allowaccess"]; ok {

		result["ip6_allowaccess"] = flattenSystemInterfaceIpv6Ip6Allowaccess(i["ip6-allowaccess"], d, pre_append, sv)
	}

	pre_append = pre + ".0." + "ip6_retrans_time"
	if _, ok := i["ip6-retrans-time"]; ok {

		result["ip6_retrans_time"] = flattenSystemInterfaceIpv6Ip6RetransTime(i["ip6-retrans-time"], d, pre_append, sv)
	}

	pre_append = pre + ".0." + "vrrp6"
	if _, ok := i["vrrp6"]; ok {

		result["vrrp6"] = flattenSystemInterfaceIpv6Vrrp6(i["vrrp6"], d, pre_append, sv)
	}

	pre_append = pre + ".0." + "ip6_other_flag"
	if _, ok := i["ip6-other-flag"]; ok {

		result["ip6_other_flag"] = flattenSystemInterfaceIpv6Ip6OtherFlag(i["ip6-other-flag"], d, pre_append, sv)
	}

	pre_append = pre + ".0." + "ip6_dns_server_override"
	if _, ok := i["ip6-dns-server-override"]; ok {

		result["ip6_dns_server_override"] = flattenSystemInterfaceIpv6Ip6DnsServerOverride(i["ip6-dns-server-override"], d, pre_append, sv)
	}

	pre_append = pre + ".0." + "vrip6_link_local"
	if _, ok := i["vrip6_link_local"]; ok {

		result["vrip6_link_local"] = flattenSystemInterfaceIpv6Vrip6_Link_Local(i["vrip6_link_local"], d, pre_append, sv)
	}

	pre_append = pre + ".0." + "ip6_address"
	if _, ok := i["ip6-address"]; ok {

		result["ip6_address"] = flattenSystemInterfaceIpv6Ip6Address(i["ip6-address"], d, pre_append, sv)
	}

	pre_append = pre + ".0." + "ip6_prefix_list"
	if _, ok := i["ip6-prefix-list"]; ok {

		result["ip6_prefix_list"] = flattenSystemInterfaceIpv6Ip6PrefixList(i["ip6-prefix-list"], d, pre_append, sv)
	}

	pre_append = pre + ".0." + "ip6_link_mtu"
	if _, ok := i["ip6-link-mtu"]; ok {

		result["ip6_link_mtu"] = flattenSystemInterfaceIpv6Ip6LinkMtu(i["ip6-link-mtu"], d, pre_append, sv)
	}

	pre_append = pre + ".0." + "ip6_manage_flag"
	if _, ok := i["ip6-manage-flag"]; ok {

		result["ip6_manage_flag"] = flattenSystemInterfaceIpv6Ip6ManageFlag(i["ip6-manage-flag"], d, pre_append, sv)
	}

	pre_append = pre + ".0." + "ip6_min_interval"
	if _, ok := i["ip6-min-interval"]; ok {

		result["ip6_min_interval"] = flattenSystemInterfaceIpv6Ip6MinInterval(i["ip6-min-interval"], d, pre_append, sv)
	}

	pre_append = pre + ".0." + "ip6_mode"
	if _, ok := i["ip6-mode"]; ok {

		result["ip6_mode"] = flattenSystemInterfaceIpv6Ip6Mode(i["ip6-mode"], d, pre_append, sv)
	}

	pre_append = pre + ".0." + "ip6_hop_limit"
	if _, ok := i["ip6-hop-limit"]; ok {

		result["ip6_hop_limit"] = flattenSystemInterfaceIpv6Ip6HopLimit(i["ip6-hop-limit"], d, pre_append, sv)
	}

	pre_append = pre + ".0." + "ip6_reachable_time"
	if _, ok := i["ip6-reachable-time"]; ok {

		result["ip6_reachable_time"] = flattenSystemInterfaceIpv6Ip6ReachableTime(i["ip6-reachable-time"], d, pre_append, sv)
	}

	pre_append = pre + ".0." + "ip6_extra_addr"
	if _, ok := i["ip6-extra-addr"]; ok {

		result["ip6_extra_addr"] = flattenSystemInterfaceIpv6Ip6ExtraAddr(i["ip6-extra-addr"], d, pre_append, sv)
	}

	pre_append = pre + ".0." + "ip6_default_life"
	if _, ok := i["ip6-default-life"]; ok {

		result["ip6_default_life"] = flattenSystemInterfaceIpv6Ip6DefaultLife(i["ip6-default-life"], d, pre_append, sv)
	}

	pre_append = pre + ".0." + "ip6_max_interval"
	if _, ok := i["ip6-max-interval"]; ok {

		result["ip6_max_interval"] = flattenSystemInterfaceIpv6Ip6MaxInterval(i["ip6-max-interval"], d, pre_append, sv)
	}

	pre_append = pre + ".0." + "vrrp_virtual_mac6"
	if _, ok := i["vrrp-virtual-mac6"]; ok {

		result["vrrp_virtual_mac6"] = flattenSystemInterfaceIpv6VrrpVirtualMac6(i["vrrp-virtual-mac6"], d, pre_append, sv)
	}

	pre_append = pre + ".0." + "ip6_unknown_mcast_to_cpu"
	if _, ok := i["ip6-unknown-mcast-to-cpu"]; ok {

		result["ip6_unknown_mcast_to_cpu"] = flattenSystemInterfaceIpv6Ip6UnknownMcastToCpu(i["ip6-unknown-mcast-to-cpu"], d, pre_append, sv)
	}

	pre_append = pre + ".0." + "ip6_send_adv"
	if _, ok := i["ip6-send-adv"]; ok {

		result["ip6_send_adv"] = flattenSystemInterfaceIpv6Ip6SendAdv(i["ip6-send-adv"], d, pre_append, sv)
	}

	pre_append = pre + ".0." + "autoconf"
	if _, ok := i["autoconf"]; ok {

		result["autoconf"] = flattenSystemInterfaceIpv6Autoconf(i["autoconf"], d, pre_append, sv)
	}

	pre_append = pre + ".0." + "dhcp6_information_request"
	if _, ok := i["dhcp6-information-request"]; ok {

		result["dhcp6_information_request"] = flattenSystemInterfaceIpv6Dhcp6InformationRequest(i["dhcp6-information-request"], d, pre_append, sv)
	}

	lastresult := []map[string]interface{}{result}
	return lastresult
}

func flattenSystemInterfaceIpv6Ip6Allowaccess(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6RetransTime(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Vrrp6(v interface{}, d *schema.ResourceData, pre string, sv string) []map[string]interface{} {
	if v == nil {
		return nil
	}

	if _, ok := v.([]interface{}); !ok {
		log.Printf("[DEBUG] Argument %v is not type of []interface{}.", pre)
		return nil
	}

	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil
	}

	result := make([]map[string]interface{}, 0, len(l))

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})

		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "status"
		if _, ok := i["status"]; ok {

			tmp["status"] = flattenSystemInterfaceIpv6Vrrp6Status(i["status"], d, pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "priority"
		if _, ok := i["priority"]; ok {

			tmp["priority"] = flattenSystemInterfaceIpv6Vrrp6Priority(i["priority"], d, pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrip6"
		if _, ok := i["vrip6"]; ok {

			tmp["vrip6"] = flattenSystemInterfaceIpv6Vrrp6Vrip6(i["vrip6"], d, pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "adv_interval"
		if _, ok := i["adv-interval"]; ok {

			tmp["adv_interval"] = flattenSystemInterfaceIpv6Vrrp6AdvInterval(i["adv-interval"], d, pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "start_time"
		if _, ok := i["start-time"]; ok {

			tmp["start_time"] = flattenSystemInterfaceIpv6Vrrp6StartTime(i["start-time"], d, pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrid"
		if _, ok := i["vrid"]; ok {

			tmp["vrid"] = flattenSystemInterfaceIpv6Vrrp6Vrid(i["vrid"], d, pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrgrp"
		if _, ok := i["vrgrp"]; ok {

			tmp["vrgrp"] = flattenSystemInterfaceIpv6Vrrp6Vrgrp(i["vrgrp"], d, pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "preempt"
		if _, ok := i["preempt"]; ok {

			tmp["preempt"] = flattenSystemInterfaceIpv6Vrrp6Preempt(i["preempt"], d, pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "accept_mode"
		if _, ok := i["accept-mode"]; ok {

			tmp["accept_mode"] = flattenSystemInterfaceIpv6Vrrp6AcceptMode(i["accept-mode"], d, pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrdst6"
		if _, ok := i["vrdst6"]; ok {

			tmp["vrdst6"] = flattenSystemInterfaceIpv6Vrrp6Vrdst6(i["vrdst6"], d, pre_append, sv)
		}

		result = append(result, tmp)

		con += 1
	}

	dynamic_sort_subtable(result, "vrid", d)
	return result
}

func flattenSystemInterfaceIpv6Vrrp6Status(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Vrrp6Priority(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Vrrp6Vrip6(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Vrrp6AdvInterval(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Vrrp6StartTime(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Vrrp6Vrid(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Vrrp6Vrgrp(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Vrrp6Preempt(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Vrrp6AcceptMode(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Vrrp6Vrdst6(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6OtherFlag(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6DnsServerOverride(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Vrip6_Link_Local(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6Address(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6PrefixList(v interface{}, d *schema.ResourceData, pre string, sv string) []map[string]interface{} {
	if v == nil {
		return nil
	}

	if _, ok := v.([]interface{}); !ok {
		log.Printf("[DEBUG] Argument %v is not type of []interface{}.", pre)
		return nil
	}

	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil
	}

	result := make([]map[string]interface{}, 0, len(l))

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})

		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "valid_life_time"
		if _, ok := i["valid-life-time"]; ok {

			tmp["valid_life_time"] = flattenSystemInterfaceIpv6Ip6PrefixListValidLifeTime(i["valid-life-time"], d, pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "prefix"
		if _, ok := i["prefix"]; ok {

			tmp["prefix"] = flattenSystemInterfaceIpv6Ip6PrefixListPrefix(i["prefix"], d, pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "autonomous_flag"
		if _, ok := i["autonomous-flag"]; ok {

			tmp["autonomous_flag"] = flattenSystemInterfaceIpv6Ip6PrefixListAutonomousFlag(i["autonomous-flag"], d, pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "onlink_flag"
		if _, ok := i["onlink-flag"]; ok {

			tmp["onlink_flag"] = flattenSystemInterfaceIpv6Ip6PrefixListOnlinkFlag(i["onlink-flag"], d, pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "preferred_life_time"
		if _, ok := i["preferred-life-time"]; ok {

			tmp["preferred_life_time"] = flattenSystemInterfaceIpv6Ip6PrefixListPreferredLifeTime(i["preferred-life-time"], d, pre_append, sv)
		}

		result = append(result, tmp)

		con += 1
	}

	dynamic_sort_subtable(result, "prefix", d)
	return result
}

func flattenSystemInterfaceIpv6Ip6PrefixListValidLifeTime(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6PrefixListPrefix(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6PrefixListAutonomousFlag(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6PrefixListOnlinkFlag(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6PrefixListPreferredLifeTime(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6LinkMtu(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6ManageFlag(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6MinInterval(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6Mode(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6HopLimit(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6ReachableTime(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6ExtraAddr(v interface{}, d *schema.ResourceData, pre string, sv string) []map[string]interface{} {
	if v == nil {
		return nil
	}

	if _, ok := v.([]interface{}); !ok {
		log.Printf("[DEBUG] Argument %v is not type of []interface{}.", pre)
		return nil
	}

	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil
	}

	result := make([]map[string]interface{}, 0, len(l))

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})

		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "prefix"
		if _, ok := i["prefix"]; ok {

			tmp["prefix"] = flattenSystemInterfaceIpv6Ip6ExtraAddrPrefix(i["prefix"], d, pre_append, sv)
		}

		result = append(result, tmp)

		con += 1
	}

	dynamic_sort_subtable(result, "prefix", d)
	return result
}

func flattenSystemInterfaceIpv6Ip6ExtraAddrPrefix(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6DefaultLife(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6MaxInterval(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6VrrpVirtualMac6(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6UnknownMcastToCpu(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6SendAdv(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Autoconf(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Dhcp6InformationRequest(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceDynamicgw(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceMtuOverride(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceMtu(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceDynamic_Dns1(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceAlias(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceAuthType(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceDynamic_Dns2(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceStatus(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceMode(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceHaPriority(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceSecondaryip(v interface{}, d *schema.ResourceData, pre string, sv string) []map[string]interface{} {
	if v == nil {
		return nil
	}

	if _, ok := v.([]interface{}); !ok {
		log.Printf("[DEBUG] Argument %v is not type of []interface{}.", pre)
		return nil
	}

	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil
	}

	result := make([]map[string]interface{}, 0, len(l))

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})

		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "gwdetect"
		if _, ok := i["gwdetect"]; ok {

			tmp["gwdetect"] = flattenSystemInterfaceSecondaryipGwdetect(i["gwdetect"], d, pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "detectprotocol"
		if _, ok := i["detectprotocol"]; ok {

			tmp["detectprotocol"] = flattenSystemInterfaceSecondaryipDetectprotocol(i["detectprotocol"], d, pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "ip"
		if _, ok := i["ip"]; ok {

			tmp["ip"] = flattenSystemInterfaceSecondaryipIp(i["ip"], d, pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "detectserver"
		if _, ok := i["detectserver"]; ok {

			tmp["detectserver"] = flattenSystemInterfaceSecondaryipDetectserver(i["detectserver"], d, pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "allowaccess"
		if _, ok := i["allowaccess"]; ok {

			tmp["allowaccess"] = flattenSystemInterfaceSecondaryipAllowaccess(i["allowaccess"], d, pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "ping_serv_status"
		if _, ok := i["ping-serv-status"]; ok {

			tmp["ping_serv_status"] = flattenSystemInterfaceSecondaryipPingServStatus(i["ping-serv-status"], d, pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "ha_priority"
		if _, ok := i["ha-priority"]; ok {

			tmp["ha_priority"] = flattenSystemInterfaceSecondaryipHaPriority(i["ha-priority"], d, pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "id"
		if _, ok := i["id"]; ok {

			tmp["id"] = flattenSystemInterfaceSecondaryipId(i["id"], d, pre_append, sv)
		}

		result = append(result, tmp)

		con += 1
	}

	dynamic_sort_subtable(result, "id", d)
	return result
}

func flattenSystemInterfaceSecondaryipGwdetect(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceSecondaryipDetectprotocol(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceSecondaryipIp(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceSecondaryipDetectserver(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceSecondaryipAllowaccess(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceSecondaryipPingServStatus(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceSecondaryipHaPriority(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceSecondaryipId(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func flattenSystemInterfaceSwitchMembers(v interface{}, d *schema.ResourceData, pre string, sv string) []map[string]interface{} {
	if v == nil {
		return nil
	}

	if _, ok := v.([]interface{}); !ok {
		log.Printf("[DEBUG] Argument %v is not type of []interface{}.", pre)
		return nil
	}

	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil
	}

	result := make([]map[string]interface{}, 0, len(l))

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})

		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "member_name"
		if _, ok := i["member-name"]; ok {

			tmp["member_name"] = flattenSystemInterfaceSwitchMembersMemberName(i["member-name"], d, pre_append, sv)
		}

		result = append(result, tmp)

		con += 1
	}

	dynamic_sort_subtable(result, "member_name", d)
	return result
}

func flattenSystemInterfaceSwitchMembersMemberName(v interface{}, d *schema.ResourceData, pre string, sv string) interface{} {
	return v
}

func refreshObjectSystemInterface(d *schema.ResourceData, o map[string]interface{}, sv string) error {
	var err error

	if err = d.Set("defaultgw", flattenSystemInterfaceDefaultgw(o["defaultgw"], d, "defaultgw", sv)); err != nil {
		if !fortiAPIPatch(o["defaultgw"]) {
			return fmt.Errorf("Error reading defaultgw: %v", err)
		}
	}

	if err = d.Set("gwdetect", flattenSystemInterfaceGwdetect(o["gwdetect"], d, "gwdetect", sv)); err != nil {
		if !fortiAPIPatch(o["gwdetect"]) {
			return fmt.Errorf("Error reading gwdetect: %v", err)
		}
	}

	if err = d.Set("dhcp_client_status", flattenSystemInterfaceDhcpClientStatus(o["dhcp-client-status"], d, "dhcp_client_status", sv)); err != nil {
		if !fortiAPIPatch(o["dhcp-client-status"]) {
			return fmt.Errorf("Error reading dhcp_client_status: %v", err)
		}
	}

	if err = d.Set("weight", flattenSystemInterfaceWeight(o["weight"], d, "weight", sv)); err != nil {
		if !fortiAPIPatch(o["weight"]) {
			return fmt.Errorf("Error reading weight: %v", err)
		}
	}

	if err = d.Set("ip", flattenSystemInterfaceIp(o["ip"], d, "ip", sv)); err != nil {
		if !fortiAPIPatch(o["ip"]) {
			return fmt.Errorf("Error reading ip: %v", err)
		}
	}

	if err = d.Set("vrrp_virtual_mac", flattenSystemInterfaceVrrpVirtualMac(o["vrrp-virtual-mac"], d, "vrrp_virtual_mac", sv)); err != nil {
		if !fortiAPIPatch(o["vrrp-virtual-mac"]) {
			return fmt.Errorf("Error reading vrrp_virtual_mac: %v", err)
		}
	}

	if err = d.Set("bfd_detect_mult", flattenSystemInterfaceBfdDetectMult(o["bfd-detect-mult"], d, "bfd_detect_mult", sv)); err != nil {
		if !fortiAPIPatch(o["bfd-detect-mult"]) {
			return fmt.Errorf("Error reading bfd_detect_mult: %v", err)
		}
	}

	if err = d.Set("bfd_required_min_rx", flattenSystemInterfaceBfdRequiredMinRx(o["bfd-required-min-rx"], d, "bfd_required_min_rx", sv)); err != nil {
		if !fortiAPIPatch(o["bfd-required-min-rx"]) {
			return fmt.Errorf("Error reading bfd_required_min_rx: %v", err)
		}
	}

	if err = d.Set("l2_interface", flattenSystemInterfaceL2Interface(o["l2-interface"], d, "l2_interface", sv)); err != nil {
		if !fortiAPIPatch(o["l2-interface"]) {
			return fmt.Errorf("Error reading l2_interface: %v", err)
		}
	}

	if err = d.Set("src_check_allow_default", flattenSystemInterfaceSrcCheckAllowDefault(o["src-check-allow-default"], d, "src_check_allow_default", sv)); err != nil {
		if !fortiAPIPatch(o["src-check-allow-default"]) {
			return fmt.Errorf("Error reading src_check_allow_default: %v", err)
		}
	}

	if err = d.Set("dhcp_relay_ip", flattenSystemInterfaceDhcpRelayIp(o["dhcp-relay-ip"], d, "dhcp_relay_ip", sv)); err != nil {
		if !fortiAPIPatch(o["dhcp-relay-ip"]) {
			return fmt.Errorf("Error reading dhcp_relay_ip: %v", err)
		}
	}

	if err = d.Set("forward_domain", flattenSystemInterfaceForwardDomain(o["forward-domain"], d, "forward_domain", sv)); err != nil {
		if !fortiAPIPatch(o["forward-domain"]) {
			return fmt.Errorf("Error reading forward_domain: %v", err)
		}
	}

	if err = d.Set("speed", flattenSystemInterfaceSpeed(o["speed"], d, "speed", sv)); err != nil {
		if !fortiAPIPatch(o["speed"]) {
			return fmt.Errorf("Error reading speed: %v", err)
		}
	}

	if err = d.Set("vlanforward", flattenSystemInterfaceVlanforward(o["vlanforward"], d, "vlanforward", sv)); err != nil {
		if !fortiAPIPatch(o["vlanforward"]) {
			return fmt.Errorf("Error reading vlanforward: %v", err)
		}
	}

	if err = d.Set("priority", flattenSystemInterfacePriority(o["priority"], d, "priority", sv)); err != nil {
		if !fortiAPIPatch(o["priority"]) {
			return fmt.Errorf("Error reading priority: %v", err)
		}
	}

	if err = d.Set("bfd", flattenSystemInterfaceBfd(o["bfd"], d, "bfd", sv)); err != nil {
		if !fortiAPIPatch(o["bfd"]) {
			return fmt.Errorf("Error reading bfd: %v", err)
		}
	}

	if err = d.Set("macaddr", flattenSystemInterfaceMacaddr(o["macaddr"], d, "macaddr", sv)); err != nil {
		if !fortiAPIPatch(o["macaddr"]) {
			return fmt.Errorf("Error reading macaddr: %v", err)
		}
	}

	if err = d.Set("bfd_desired_min_tx", flattenSystemInterfaceBfdDesiredMinTx(o["bfd-desired-min-tx"], d, "bfd_desired_min_tx", sv)); err != nil {
		if !fortiAPIPatch(o["bfd-desired-min-tx"]) {
			return fmt.Errorf("Error reading bfd_desired_min_tx: %v", err)
		}
	}

	if err = d.Set("switch", flattenSystemInterfaceSwitch(o["switch"], d, "switch", sv)); err != nil {
		if !fortiAPIPatch(o["switch"]) {
			return fmt.Errorf("Error reading switch: %v", err)
		}
	}

	if err = d.Set("vlanid", flattenSystemInterfaceVlanid(o["vlanid"], d, "vlanid", sv)); err != nil {
		if !fortiAPIPatch(o["vlanid"]) {
			return fmt.Errorf("Error reading vlanid: %v", err)
		}
	}

	if err = d.Set("cli_conn_status", flattenSystemInterfaceCliConnStatus(o["cli-conn-status"], d, "cli_conn_status", sv)); err != nil {
		if !fortiAPIPatch(o["cli-conn-status"]) {
			return fmt.Errorf("Error reading cli_conn_status: %v", err)
		}
	}

	if err = d.Set("detectserver", flattenSystemInterfaceDetectserver(o["detectserver"], d, "detectserver", sv)); err != nil {
		if !fortiAPIPatch(o["detectserver"]) {
			return fmt.Errorf("Error reading detectserver: %v", err)
		}
	}

	if isImportTable() {
		if err = d.Set("vrrp", flattenSystemInterfaceVrrp(o["vrrp"], d, "vrrp", sv)); err != nil {
			if !fortiAPIPatch(o["vrrp"]) {
				return fmt.Errorf("Error reading vrrp: %v", err)
			}
		}
	} else {
		if _, ok := d.GetOk("vrrp"); ok {
			if err = d.Set("vrrp", flattenSystemInterfaceVrrp(o["vrrp"], d, "vrrp", sv)); err != nil {
				if !fortiAPIPatch(o["vrrp"]) {
					return fmt.Errorf("Error reading vrrp: %v", err)
				}
			}
		}
	}

	if err = d.Set("allowaccess", flattenSystemInterfaceAllowaccess(o["allowaccess"], d, "allowaccess", sv)); err != nil {
		if !fortiAPIPatch(o["allowaccess"]) {
			return fmt.Errorf("Error reading allowaccess: %v", err)
		}
	}

	if err = d.Set("dhcp_client_identifier", flattenSystemInterfaceDhcpClientIdentifier(o["dhcp-client-identifier"], d, "dhcp_client_identifier", sv)); err != nil {
		if !fortiAPIPatch(o["dhcp-client-identifier"]) {
			return fmt.Errorf("Error reading dhcp_client_identifier: %v", err)
		}
	}

	if err = d.Set("ping_serv_status", flattenSystemInterfacePingServStatus(o["ping-serv-status"], d, "ping_serv_status", sv)); err != nil {
		if !fortiAPIPatch(o["ping-serv-status"]) {
			return fmt.Errorf("Error reading ping_serv_status: %v", err)
		}
	}

	if err = d.Set("type", flattenSystemInterfaceType(o["type"], d, "type", sv)); err != nil {
		if !fortiAPIPatch(o["type"]) {
			return fmt.Errorf("Error reading type: %v", err)
		}
	}

	if err = d.Set("snmp_index", flattenSystemInterfaceSnmpIndex(o["snmp-index"], d, "snmp_index", sv)); err != nil {
		if !fortiAPIPatch(o["snmp-index"]) {
			return fmt.Errorf("Error reading snmp_index: %v", err)
		}
	}

	if err = d.Set("icmp_redirect", flattenSystemInterfaceIcmpRedirect(o["icmp-redirect"], d, "icmp_redirect", sv)); err != nil {
		if !fortiAPIPatch(o["icmp-redirect"]) {
			return fmt.Errorf("Error reading icmp_redirect: %v", err)
		}
	}

	if err = d.Set("dhcp_relay_option82", flattenSystemInterfaceDhcpRelayOption82(o["dhcp-relay-option82"], d, "dhcp_relay_option82", sv)); err != nil {
		if !fortiAPIPatch(o["dhcp-relay-option82"]) {
			return fmt.Errorf("Error reading dhcp_relay_option82: %v", err)
		}
	}

	if err = d.Set("description", flattenSystemInterfaceDescription(o["description"], d, "description", sv)); err != nil {
		if !fortiAPIPatch(o["description"]) {
			return fmt.Errorf("Error reading description: %v", err)
		}
	}

	if err = d.Set("remote_ip", flattenSystemInterfaceRemoteIp(o["remote-ip"], d, "remote_ip", sv)); err != nil {
		if !fortiAPIPatch(o["remote-ip"]) {
			return fmt.Errorf("Error reading remote_ip: %v", err)
		}
	}

	if err = d.Set("dns_server_override", flattenSystemInterfaceDnsServerOverride(o["dns-server-override"], d, "dns_server_override", sv)); err != nil {
		if !fortiAPIPatch(o["dns-server-override"]) {
			return fmt.Errorf("Error reading dns_server_override: %v", err)
		}
	}

	if err = d.Set("secondary_ip", flattenSystemInterfaceSecondaryIp(o["secondary-IP"], d, "secondary_ip", sv)); err != nil {
		if !fortiAPIPatch(o["secondary-IP"]) {
			return fmt.Errorf("Error reading secondary_ip: %v", err)
		}
	}

	if err = d.Set("vrf", flattenSystemInterfaceVrf(o["vrf"], d, "vrf", sv)); err != nil {
		if !fortiAPIPatch(o["vrf"]) {
			return fmt.Errorf("Error reading vrf: %v", err)
		}
	}

	if err = d.Set("dhcp_expire", flattenSystemInterfaceDhcp_Expire(o["dhcp_expire"], d, "dhcp_expire", sv)); err != nil {
		if !fortiAPIPatch(o["dhcp_expire"]) {
			return fmt.Errorf("Error reading dhcp_expire: %v", err)
		}
	}

	if err = d.Set("interface", flattenSystemInterfaceInterface(o["interface"], d, "interface", sv)); err != nil {
		if !fortiAPIPatch(o["interface"]) {
			return fmt.Errorf("Error reading interface: %v", err)
		}
	}

	if err = d.Set("dhcp_vendor_specific_option", flattenSystemInterfaceDhcpVendorSpecificOption(o["dhcp-vendor-specific-option"], d, "dhcp_vendor_specific_option", sv)); err != nil {
		if !fortiAPIPatch(o["dhcp-vendor-specific-option"]) {
			return fmt.Errorf("Error reading dhcp_vendor_specific_option: %v", err)
		}
	}

	if err = d.Set("vdom", flattenSystemInterfaceVdom(o["vdom"], d, "vdom", sv)); err != nil {
		if !fortiAPIPatch(o["vdom"]) {
			return fmt.Errorf("Error reading vdom: %v", err)
		}
	}

	if err = d.Set("dhcp_relay_service", flattenSystemInterfaceDhcpRelayService(o["dhcp-relay-service"], d, "dhcp_relay_service", sv)); err != nil {
		if !fortiAPIPatch(o["dhcp-relay-service"]) {
			return fmt.Errorf("Error reading dhcp_relay_service: %v", err)
		}
	}

	if err = d.Set("distance", flattenSystemInterfaceDistance(o["distance"], d, "distance", sv)); err != nil {
		if !fortiAPIPatch(o["distance"]) {
			return fmt.Errorf("Error reading distance: %v", err)
		}
	}

	if err = d.Set("name", flattenSystemInterfaceName(o["name"], d, "name", sv)); err != nil {
		if !fortiAPIPatch(o["name"]) {
			return fmt.Errorf("Error reading name: %v", err)
		}
	}

	if err = d.Set("detectprotocol", flattenSystemInterfaceDetectprotocol(o["detectprotocol"], d, "detectprotocol", sv)); err != nil {
		if !fortiAPIPatch(o["detectprotocol"]) {
			return fmt.Errorf("Error reading detectprotocol: %v", err)
		}
	}

	if err = d.Set("src_check", flattenSystemInterfaceSrcCheck(o["src-check"], d, "src_check", sv)); err != nil {
		if !fortiAPIPatch(o["src-check"]) {
			return fmt.Errorf("Error reading src_check: %v", err)
		}
	}

	if isImportTable() {
		if err = d.Set("ipv6", flattenSystemInterfaceIpv6(o["ipv6"], d, "ipv6", sv)); err != nil {
			if !fortiAPIPatch(o["ipv6"]) {
				return fmt.Errorf("Error reading ipv6: %v", err)
			}
		}
	} else {
		if _, ok := d.GetOk("ipv6"); ok {
			if err = d.Set("ipv6", flattenSystemInterfaceIpv6(o["ipv6"], d, "ipv6", sv)); err != nil {
				if !fortiAPIPatch(o["ipv6"]) {
					return fmt.Errorf("Error reading ipv6: %v", err)
				}
			}
		}
	}

	if err = d.Set("dynamicgw", flattenSystemInterfaceDynamicgw(o["dynamicgw"], d, "dynamicgw", sv)); err != nil {
		if !fortiAPIPatch(o["dynamicgw"]) {
			return fmt.Errorf("Error reading dynamicgw: %v", err)
		}
	}

	if err = d.Set("mtu_override", flattenSystemInterfaceMtuOverride(o["mtu-override"], d, "mtu_override", sv)); err != nil {
		if !fortiAPIPatch(o["mtu-override"]) {
			return fmt.Errorf("Error reading mtu_override: %v", err)
		}
	}

	if err = d.Set("mtu", flattenSystemInterfaceMtu(o["mtu"], d, "mtu", sv)); err != nil {
		if !fortiAPIPatch(o["mtu"]) {
			return fmt.Errorf("Error reading mtu: %v", err)
		}
	}

	if err = d.Set("dynamic_dns1", flattenSystemInterfaceDynamic_Dns1(o["dynamic_dns1"], d, "dynamic_dns1", sv)); err != nil {
		if !fortiAPIPatch(o["dynamic_dns1"]) {
			return fmt.Errorf("Error reading dynamic_dns1: %v", err)
		}
	}

	if err = d.Set("alias", flattenSystemInterfaceAlias(o["alias"], d, "alias", sv)); err != nil {
		if !fortiAPIPatch(o["alias"]) {
			return fmt.Errorf("Error reading alias: %v", err)
		}
	}

	if err = d.Set("auth_type", flattenSystemInterfaceAuthType(o["auth-type"], d, "auth_type", sv)); err != nil {
		if !fortiAPIPatch(o["auth-type"]) {
			return fmt.Errorf("Error reading auth_type: %v", err)
		}
	}

	if err = d.Set("dynamic_dns2", flattenSystemInterfaceDynamic_Dns2(o["dynamic_dns2"], d, "dynamic_dns2", sv)); err != nil {
		if !fortiAPIPatch(o["dynamic_dns2"]) {
			return fmt.Errorf("Error reading dynamic_dns2: %v", err)
		}
	}

	if err = d.Set("status", flattenSystemInterfaceStatus(o["status"], d, "status", sv)); err != nil {
		if !fortiAPIPatch(o["status"]) {
			return fmt.Errorf("Error reading status: %v", err)
		}
	}

	if err = d.Set("mode", flattenSystemInterfaceMode(o["mode"], d, "mode", sv)); err != nil {
		if !fortiAPIPatch(o["mode"]) {
			return fmt.Errorf("Error reading mode: %v", err)
		}
	}

	if err = d.Set("ha_priority", flattenSystemInterfaceHaPriority(o["ha-priority"], d, "ha_priority", sv)); err != nil {
		if !fortiAPIPatch(o["ha-priority"]) {
			return fmt.Errorf("Error reading ha_priority: %v", err)
		}
	}

	if isImportTable() {
		if err = d.Set("secondaryip", flattenSystemInterfaceSecondaryip(o["secondaryip"], d, "secondaryip", sv)); err != nil {
			if !fortiAPIPatch(o["secondaryip"]) {
				return fmt.Errorf("Error reading secondaryip: %v", err)
			}
		}
	} else {
		if _, ok := d.GetOk("secondaryip"); ok {
			if err = d.Set("secondaryip", flattenSystemInterfaceSecondaryip(o["secondaryip"], d, "secondaryip", sv)); err != nil {
				if !fortiAPIPatch(o["secondaryip"]) {
					return fmt.Errorf("Error reading secondaryip: %v", err)
				}
			}
		}
	}

	if isImportTable() {
		if err = d.Set("switch_members", flattenSystemInterfaceSwitchMembers(o["switch-members"], d, "switch_members", sv)); err != nil {
			if !fortiAPIPatch(o["switch-members"]) {
				return fmt.Errorf("Error reading switch_members: %v", err)
			}
		}
	} else {
		if _, ok := d.GetOk("switch_members"); ok {
			if err = d.Set("switch_members", flattenSystemInterfaceSwitchMembers(o["switch-members"], d, "switch_members", sv)); err != nil {
				if !fortiAPIPatch(o["switch-members"]) {
					return fmt.Errorf("Error reading switch_members: %v", err)
				}
			}
		}
	}

	return nil
}

func flattenSystemInterfaceFortiTestDebug(d *schema.ResourceData, fswdebugsn int, fswdebugbeg int, fswdebugend int) {
	log.Printf(strconv.Itoa(fswdebugsn))
	e := validation.IntBetween(fswdebugbeg, fswdebugend)
	log.Printf("ER List: %v, %v", strings.Split("FortiSwitch Ver", " "), e)
}

func expandSystemInterfaceDefaultgw(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceGwdetect(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDhcpClientStatus(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceWeight(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIp(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVrrpVirtualMac(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceBfdDetectMult(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceBfdRequiredMinRx(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceL2Interface(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSrcCheckAllowDefault(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDhcpRelayIp(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceForwardDomain(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSpeed(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVlanforward(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfacePriority(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceBfd(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceMacaddr(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceBfdDesiredMinTx(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSwitch(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVlanid(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceCliConnStatus(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDetectserver(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVrrp(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	l := v.([]interface{})
	result := make([]map[string]interface{}, 0, len(l))

	if len(l) == 0 || l[0] == nil {
		return result, nil
	}

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})
		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "status"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["status"], _ = expandSystemInterfaceVrrpStatus(d, i["status"], pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "priority"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["priority"], _ = expandSystemInterfaceVrrpPriority(d, i["priority"], pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "adv_interval"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["adv-interval"], _ = expandSystemInterfaceVrrpAdvInterval(d, i["adv_interval"], pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "start_time"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["start-time"], _ = expandSystemInterfaceVrrpStartTime(d, i["start_time"], pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "backup_vmac_fwd"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["backup-vmac-fwd"], _ = expandSystemInterfaceVrrpBackupVmacFwd(d, i["backup_vmac_fwd"], pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrid"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["vrid"], _ = expandSystemInterfaceVrrpVrid(d, i["vrid"], pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrgrp"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["vrgrp"], _ = expandSystemInterfaceVrrpVrgrp(d, i["vrgrp"], pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "preempt"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["preempt"], _ = expandSystemInterfaceVrrpPreempt(d, i["preempt"], pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "version"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["version"], _ = expandSystemInterfaceVrrpVersion(d, i["version"], pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrdst"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["vrdst"], _ = expandSystemInterfaceVrrpVrdst(d, i["vrdst"], pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrip"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["vrip"], _ = expandSystemInterfaceVrrpVrip(d, i["vrip"], pre_append, sv)
		}

		result = append(result, tmp)

		con += 1
	}

	return result, nil
}

func expandSystemInterfaceVrrpStatus(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVrrpPriority(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVrrpAdvInterval(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVrrpStartTime(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVrrpBackupVmacFwd(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVrrpVrid(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVrrpVrgrp(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVrrpPreempt(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVrrpVersion(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVrrpVrdst(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVrrpVrip(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceAllowaccess(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDhcpClientIdentifier(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfacePingServStatus(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceType(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSnmpIndex(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIcmpRedirect(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDhcpRelayOption82(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDescription(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceRemoteIp(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDnsServerOverride(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSecondaryIp(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVrf(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDhcp_Expire(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceInterface(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDhcpVendorSpecificOption(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVdom(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDhcpRelayService(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDistance(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceName(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDetectprotocol(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSrcCheck(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}

	i := l[0].(map[string]interface{})
	result := make(map[string]interface{})

	pre_append := "" // complex
	pre_append = pre + ".0." + "ip6_allowaccess"
	if _, ok := d.GetOk(pre_append); ok {

		result["ip6-allowaccess"], _ = expandSystemInterfaceIpv6Ip6Allowaccess(d, i["ip6_allowaccess"], pre_append, sv)
	}
	pre_append = pre + ".0." + "ip6_retrans_time"
	if _, ok := d.GetOk(pre_append); ok {

		result["ip6-retrans-time"], _ = expandSystemInterfaceIpv6Ip6RetransTime(d, i["ip6_retrans_time"], pre_append, sv)
	}
	pre_append = pre + ".0." + "vrrp6"
	if _, ok := d.GetOk(pre_append); ok {

		result["vrrp6"], _ = expandSystemInterfaceIpv6Vrrp6(d, i["vrrp6"], pre_append, sv)
	} else {
		result["vrrp6"] = make([]string, 0)
	}
	pre_append = pre + ".0." + "ip6_other_flag"
	if _, ok := d.GetOk(pre_append); ok {

		result["ip6-other-flag"], _ = expandSystemInterfaceIpv6Ip6OtherFlag(d, i["ip6_other_flag"], pre_append, sv)
	}
	pre_append = pre + ".0." + "ip6_dns_server_override"
	if _, ok := d.GetOk(pre_append); ok {

		result["ip6-dns-server-override"], _ = expandSystemInterfaceIpv6Ip6DnsServerOverride(d, i["ip6_dns_server_override"], pre_append, sv)
	}
	pre_append = pre + ".0." + "vrip6_link_local"
	if _, ok := d.GetOk(pre_append); ok {

		result["vrip6_link_local"], _ = expandSystemInterfaceIpv6Vrip6_Link_Local(d, i["vrip6_link_local"], pre_append, sv)
	}
	pre_append = pre + ".0." + "ip6_address"
	if _, ok := d.GetOk(pre_append); ok {

		result["ip6-address"], _ = expandSystemInterfaceIpv6Ip6Address(d, i["ip6_address"], pre_append, sv)
	}
	pre_append = pre + ".0." + "ip6_prefix_list"
	if _, ok := d.GetOk(pre_append); ok {

		result["ip6-prefix-list"], _ = expandSystemInterfaceIpv6Ip6PrefixList(d, i["ip6_prefix_list"], pre_append, sv)
	} else {
		result["ip6-prefix-list"] = make([]string, 0)
	}
	pre_append = pre + ".0." + "ip6_link_mtu"
	if _, ok := d.GetOk(pre_append); ok {

		result["ip6-link-mtu"], _ = expandSystemInterfaceIpv6Ip6LinkMtu(d, i["ip6_link_mtu"], pre_append, sv)
	}
	pre_append = pre + ".0." + "ip6_manage_flag"
	if _, ok := d.GetOk(pre_append); ok {

		result["ip6-manage-flag"], _ = expandSystemInterfaceIpv6Ip6ManageFlag(d, i["ip6_manage_flag"], pre_append, sv)
	}
	pre_append = pre + ".0." + "ip6_min_interval"
	if _, ok := d.GetOk(pre_append); ok {

		result["ip6-min-interval"], _ = expandSystemInterfaceIpv6Ip6MinInterval(d, i["ip6_min_interval"], pre_append, sv)
	}
	pre_append = pre + ".0." + "ip6_mode"
	if _, ok := d.GetOk(pre_append); ok {

		result["ip6-mode"], _ = expandSystemInterfaceIpv6Ip6Mode(d, i["ip6_mode"], pre_append, sv)
	}
	pre_append = pre + ".0." + "ip6_hop_limit"
	if _, ok := d.GetOk(pre_append); ok {

		result["ip6-hop-limit"], _ = expandSystemInterfaceIpv6Ip6HopLimit(d, i["ip6_hop_limit"], pre_append, sv)
	}
	pre_append = pre + ".0." + "ip6_reachable_time"
	if _, ok := d.GetOk(pre_append); ok {

		result["ip6-reachable-time"], _ = expandSystemInterfaceIpv6Ip6ReachableTime(d, i["ip6_reachable_time"], pre_append, sv)
	}
	pre_append = pre + ".0." + "ip6_extra_addr"
	if _, ok := d.GetOk(pre_append); ok {

		result["ip6-extra-addr"], _ = expandSystemInterfaceIpv6Ip6ExtraAddr(d, i["ip6_extra_addr"], pre_append, sv)
	} else {
		result["ip6-extra-addr"] = make([]string, 0)
	}
	pre_append = pre + ".0." + "ip6_default_life"
	if _, ok := d.GetOk(pre_append); ok {

		result["ip6-default-life"], _ = expandSystemInterfaceIpv6Ip6DefaultLife(d, i["ip6_default_life"], pre_append, sv)
	}
	pre_append = pre + ".0." + "ip6_max_interval"
	if _, ok := d.GetOk(pre_append); ok {

		result["ip6-max-interval"], _ = expandSystemInterfaceIpv6Ip6MaxInterval(d, i["ip6_max_interval"], pre_append, sv)
	}
	pre_append = pre + ".0." + "vrrp_virtual_mac6"
	if _, ok := d.GetOk(pre_append); ok {

		result["vrrp-virtual-mac6"], _ = expandSystemInterfaceIpv6VrrpVirtualMac6(d, i["vrrp_virtual_mac6"], pre_append, sv)
	}
	pre_append = pre + ".0." + "ip6_unknown_mcast_to_cpu"
	if _, ok := d.GetOk(pre_append); ok {

		result["ip6-unknown-mcast-to-cpu"], _ = expandSystemInterfaceIpv6Ip6UnknownMcastToCpu(d, i["ip6_unknown_mcast_to_cpu"], pre_append, sv)
	}
	pre_append = pre + ".0." + "ip6_send_adv"
	if _, ok := d.GetOk(pre_append); ok {

		result["ip6-send-adv"], _ = expandSystemInterfaceIpv6Ip6SendAdv(d, i["ip6_send_adv"], pre_append, sv)
	}
	pre_append = pre + ".0." + "autoconf"
	if _, ok := d.GetOk(pre_append); ok {

		result["autoconf"], _ = expandSystemInterfaceIpv6Autoconf(d, i["autoconf"], pre_append, sv)
	}
	pre_append = pre + ".0." + "dhcp6_information_request"
	if _, ok := d.GetOk(pre_append); ok {

		result["dhcp6-information-request"], _ = expandSystemInterfaceIpv6Dhcp6InformationRequest(d, i["dhcp6_information_request"], pre_append, sv)
	}

	return result, nil
}

func expandSystemInterfaceIpv6Ip6Allowaccess(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6RetransTime(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Vrrp6(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	l := v.([]interface{})
	result := make([]map[string]interface{}, 0, len(l))

	if len(l) == 0 || l[0] == nil {
		return result, nil
	}

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})
		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "status"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["status"], _ = expandSystemInterfaceIpv6Vrrp6Status(d, i["status"], pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "priority"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["priority"], _ = expandSystemInterfaceIpv6Vrrp6Priority(d, i["priority"], pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrip6"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["vrip6"], _ = expandSystemInterfaceIpv6Vrrp6Vrip6(d, i["vrip6"], pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "adv_interval"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["adv-interval"], _ = expandSystemInterfaceIpv6Vrrp6AdvInterval(d, i["adv_interval"], pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "start_time"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["start-time"], _ = expandSystemInterfaceIpv6Vrrp6StartTime(d, i["start_time"], pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrid"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["vrid"], _ = expandSystemInterfaceIpv6Vrrp6Vrid(d, i["vrid"], pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrgrp"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["vrgrp"], _ = expandSystemInterfaceIpv6Vrrp6Vrgrp(d, i["vrgrp"], pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "preempt"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["preempt"], _ = expandSystemInterfaceIpv6Vrrp6Preempt(d, i["preempt"], pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "accept_mode"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["accept-mode"], _ = expandSystemInterfaceIpv6Vrrp6AcceptMode(d, i["accept_mode"], pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrdst6"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["vrdst6"], _ = expandSystemInterfaceIpv6Vrrp6Vrdst6(d, i["vrdst6"], pre_append, sv)
		}

		result = append(result, tmp)

		con += 1
	}

	return result, nil
}

func expandSystemInterfaceIpv6Vrrp6Status(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Vrrp6Priority(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Vrrp6Vrip6(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Vrrp6AdvInterval(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Vrrp6StartTime(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Vrrp6Vrid(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Vrrp6Vrgrp(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Vrrp6Preempt(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Vrrp6AcceptMode(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Vrrp6Vrdst6(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6OtherFlag(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6DnsServerOverride(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Vrip6_Link_Local(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6Address(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6PrefixList(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	l := v.([]interface{})
	result := make([]map[string]interface{}, 0, len(l))

	if len(l) == 0 || l[0] == nil {
		return result, nil
	}

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})
		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "valid_life_time"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["valid-life-time"], _ = expandSystemInterfaceIpv6Ip6PrefixListValidLifeTime(d, i["valid_life_time"], pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "prefix"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["prefix"], _ = expandSystemInterfaceIpv6Ip6PrefixListPrefix(d, i["prefix"], pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "autonomous_flag"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["autonomous-flag"], _ = expandSystemInterfaceIpv6Ip6PrefixListAutonomousFlag(d, i["autonomous_flag"], pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "onlink_flag"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["onlink-flag"], _ = expandSystemInterfaceIpv6Ip6PrefixListOnlinkFlag(d, i["onlink_flag"], pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "preferred_life_time"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["preferred-life-time"], _ = expandSystemInterfaceIpv6Ip6PrefixListPreferredLifeTime(d, i["preferred_life_time"], pre_append, sv)
		}

		result = append(result, tmp)

		con += 1
	}

	return result, nil
}

func expandSystemInterfaceIpv6Ip6PrefixListValidLifeTime(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6PrefixListPrefix(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6PrefixListAutonomousFlag(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6PrefixListOnlinkFlag(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6PrefixListPreferredLifeTime(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6LinkMtu(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6ManageFlag(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6MinInterval(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6Mode(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6HopLimit(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6ReachableTime(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6ExtraAddr(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	l := v.([]interface{})
	result := make([]map[string]interface{}, 0, len(l))

	if len(l) == 0 || l[0] == nil {
		return result, nil
	}

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})
		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "prefix"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["prefix"], _ = expandSystemInterfaceIpv6Ip6ExtraAddrPrefix(d, i["prefix"], pre_append, sv)
		}

		result = append(result, tmp)

		con += 1
	}

	return result, nil
}

func expandSystemInterfaceIpv6Ip6ExtraAddrPrefix(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6DefaultLife(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6MaxInterval(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6VrrpVirtualMac6(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6UnknownMcastToCpu(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6SendAdv(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Autoconf(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Dhcp6InformationRequest(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDynamicgw(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceMtuOverride(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceMtu(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDynamic_Dns1(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceAlias(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceAuthType(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDynamic_Dns2(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceStatus(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceMode(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceHaPriority(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSecondaryip(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	l := v.([]interface{})
	result := make([]map[string]interface{}, 0, len(l))

	if len(l) == 0 || l[0] == nil {
		return result, nil
	}

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})
		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "gwdetect"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["gwdetect"], _ = expandSystemInterfaceSecondaryipGwdetect(d, i["gwdetect"], pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "detectprotocol"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["detectprotocol"], _ = expandSystemInterfaceSecondaryipDetectprotocol(d, i["detectprotocol"], pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "ip"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["ip"], _ = expandSystemInterfaceSecondaryipIp(d, i["ip"], pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "detectserver"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["detectserver"], _ = expandSystemInterfaceSecondaryipDetectserver(d, i["detectserver"], pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "allowaccess"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["allowaccess"], _ = expandSystemInterfaceSecondaryipAllowaccess(d, i["allowaccess"], pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "ping_serv_status"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["ping-serv-status"], _ = expandSystemInterfaceSecondaryipPingServStatus(d, i["ping_serv_status"], pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "ha_priority"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["ha-priority"], _ = expandSystemInterfaceSecondaryipHaPriority(d, i["ha_priority"], pre_append, sv)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "id"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["id"], _ = expandSystemInterfaceSecondaryipId(d, i["id"], pre_append, sv)
		}

		result = append(result, tmp)

		con += 1
	}

	return result, nil
}

func expandSystemInterfaceSecondaryipGwdetect(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSecondaryipDetectprotocol(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSecondaryipIp(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSecondaryipDetectserver(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSecondaryipAllowaccess(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSecondaryipPingServStatus(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSecondaryipHaPriority(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSecondaryipId(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSwitchMembers(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	l := v.([]interface{})
	result := make([]map[string]interface{}, 0, len(l))

	if len(l) == 0 || l[0] == nil {
		return result, nil
	}

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})
		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "member_name"
		if _, ok := d.GetOk(pre_append); ok {

			tmp["member-name"], _ = expandSystemInterfaceSwitchMembersMemberName(d, i["member_name"], pre_append, sv)
		}

		result = append(result, tmp)

		con += 1
	}

	return result, nil
}

func expandSystemInterfaceSwitchMembersMemberName(d *schema.ResourceData, v interface{}, pre string, sv string) (interface{}, error) {
	return v, nil
}

func getObjectSystemInterface(d *schema.ResourceData, sv string) (*map[string]interface{}, error) {
	obj := make(map[string]interface{})

	if v, ok := d.GetOk("defaultgw"); ok {

		t, err := expandSystemInterfaceDefaultgw(d, v, "defaultgw", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["defaultgw"] = t
		}
	}

	if v, ok := d.GetOk("gwdetect"); ok {

		t, err := expandSystemInterfaceGwdetect(d, v, "gwdetect", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["gwdetect"] = t
		}
	}

	if v, ok := d.GetOk("dhcp_client_status"); ok {

		t, err := expandSystemInterfaceDhcpClientStatus(d, v, "dhcp_client_status", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dhcp-client-status"] = t
		}
	}

	if v, ok := d.GetOkExists("weight"); ok {

		t, err := expandSystemInterfaceWeight(d, v, "weight", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["weight"] = t
		}
	}

	if v, ok := d.GetOk("ip"); ok {

		t, err := expandSystemInterfaceIp(d, v, "ip", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["ip"] = t
		}
	}

	if v, ok := d.GetOk("vrrp_virtual_mac"); ok {

		t, err := expandSystemInterfaceVrrpVirtualMac(d, v, "vrrp_virtual_mac", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["vrrp-virtual-mac"] = t
		}
	}

	if v, ok := d.GetOk("bfd_detect_mult"); ok {

		t, err := expandSystemInterfaceBfdDetectMult(d, v, "bfd_detect_mult", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["bfd-detect-mult"] = t
		}
	}

	if v, ok := d.GetOk("bfd_required_min_rx"); ok {

		t, err := expandSystemInterfaceBfdRequiredMinRx(d, v, "bfd_required_min_rx", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["bfd-required-min-rx"] = t
		}
	}

	if v, ok := d.GetOk("l2_interface"); ok {

		t, err := expandSystemInterfaceL2Interface(d, v, "l2_interface", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["l2-interface"] = t
		}
	}

	if v, ok := d.GetOk("src_check_allow_default"); ok {

		t, err := expandSystemInterfaceSrcCheckAllowDefault(d, v, "src_check_allow_default", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["src-check-allow-default"] = t
		}
	}

	if v, ok := d.GetOk("dhcp_relay_ip"); ok {

		t, err := expandSystemInterfaceDhcpRelayIp(d, v, "dhcp_relay_ip", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dhcp-relay-ip"] = t
		}
	}

	if v, ok := d.GetOkExists("forward_domain"); ok {

		t, err := expandSystemInterfaceForwardDomain(d, v, "forward_domain", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["forward-domain"] = t
		}
	}

	if v, ok := d.GetOk("speed"); ok {

		t, err := expandSystemInterfaceSpeed(d, v, "speed", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["speed"] = t
		}
	}

	if v, ok := d.GetOk("vlanforward"); ok {

		t, err := expandSystemInterfaceVlanforward(d, v, "vlanforward", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["vlanforward"] = t
		}
	}

	if v, ok := d.GetOk("priority"); ok {

		t, err := expandSystemInterfacePriority(d, v, "priority", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["priority"] = t
		}
	}

	if v, ok := d.GetOk("bfd"); ok {

		t, err := expandSystemInterfaceBfd(d, v, "bfd", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["bfd"] = t
		}
	}

	if v, ok := d.GetOk("macaddr"); ok {

		t, err := expandSystemInterfaceMacaddr(d, v, "macaddr", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["macaddr"] = t
		}
	}

	if v, ok := d.GetOk("bfd_desired_min_tx"); ok {

		t, err := expandSystemInterfaceBfdDesiredMinTx(d, v, "bfd_desired_min_tx", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["bfd-desired-min-tx"] = t
		}
	}

	if v, ok := d.GetOk("switch"); ok {

		t, err := expandSystemInterfaceSwitch(d, v, "switch", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["switch"] = t
		}
	}

	if v, ok := d.GetOk("vlanid"); ok {

		t, err := expandSystemInterfaceVlanid(d, v, "vlanid", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["vlanid"] = t
		}
	}

	if v, ok := d.GetOk("cli_conn_status"); ok {

		t, err := expandSystemInterfaceCliConnStatus(d, v, "cli_conn_status", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["cli-conn-status"] = t
		}
	}

	if v, ok := d.GetOk("detectserver"); ok {

		t, err := expandSystemInterfaceDetectserver(d, v, "detectserver", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["detectserver"] = t
		}
	}

	if v, ok := d.GetOk("vrrp"); ok || d.HasChange("vrrp") {

		t, err := expandSystemInterfaceVrrp(d, v, "vrrp", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["vrrp"] = t
		}
	}

	if v, ok := d.GetOk("allowaccess"); ok {

		t, err := expandSystemInterfaceAllowaccess(d, v, "allowaccess", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["allowaccess"] = t
		}
	}

	if v, ok := d.GetOk("dhcp_client_identifier"); ok {

		t, err := expandSystemInterfaceDhcpClientIdentifier(d, v, "dhcp_client_identifier", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dhcp-client-identifier"] = t
		}
	}

	if v, ok := d.GetOk("ping_serv_status"); ok {

		t, err := expandSystemInterfacePingServStatus(d, v, "ping_serv_status", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["ping-serv-status"] = t
		}
	}

	if v, ok := d.GetOk("type"); ok {

		t, err := expandSystemInterfaceType(d, v, "type", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["type"] = t
		}
	}

	if v, ok := d.GetOk("snmp_index"); ok {

		t, err := expandSystemInterfaceSnmpIndex(d, v, "snmp_index", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["snmp-index"] = t
		}
	}

	if v, ok := d.GetOk("icmp_redirect"); ok {

		t, err := expandSystemInterfaceIcmpRedirect(d, v, "icmp_redirect", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["icmp-redirect"] = t
		}
	}

	if v, ok := d.GetOk("dhcp_relay_option82"); ok {

		t, err := expandSystemInterfaceDhcpRelayOption82(d, v, "dhcp_relay_option82", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dhcp-relay-option82"] = t
		}
	}

	if v, ok := d.GetOk("description"); ok {

		t, err := expandSystemInterfaceDescription(d, v, "description", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["description"] = t
		}
	}

	if v, ok := d.GetOk("remote_ip"); ok {

		t, err := expandSystemInterfaceRemoteIp(d, v, "remote_ip", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["remote-ip"] = t
		}
	}

	if v, ok := d.GetOk("dns_server_override"); ok {

		t, err := expandSystemInterfaceDnsServerOverride(d, v, "dns_server_override", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dns-server-override"] = t
		}
	}

	if v, ok := d.GetOk("secondary_ip"); ok {

		t, err := expandSystemInterfaceSecondaryIp(d, v, "secondary_ip", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["secondary-IP"] = t
		}
	}

	if v, ok := d.GetOk("vrf"); ok {

		t, err := expandSystemInterfaceVrf(d, v, "vrf", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["vrf"] = t
		}
	}

	if v, ok := d.GetOk("dhcp_expire"); ok {

		t, err := expandSystemInterfaceDhcp_Expire(d, v, "dhcp_expire", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dhcp_expire"] = t
		}
	}

	if v, ok := d.GetOk("interface"); ok {

		t, err := expandSystemInterfaceInterface(d, v, "interface", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["interface"] = t
		}
	}

	if v, ok := d.GetOk("dhcp_vendor_specific_option"); ok {

		t, err := expandSystemInterfaceDhcpVendorSpecificOption(d, v, "dhcp_vendor_specific_option", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dhcp-vendor-specific-option"] = t
		}
	}

	if v, ok := d.GetOk("vdom"); ok {

		t, err := expandSystemInterfaceVdom(d, v, "vdom", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["vdom"] = t
		}
	}

	if v, ok := d.GetOk("dhcp_relay_service"); ok {

		t, err := expandSystemInterfaceDhcpRelayService(d, v, "dhcp_relay_service", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dhcp-relay-service"] = t
		}
	}

	if v, ok := d.GetOk("distance"); ok {

		t, err := expandSystemInterfaceDistance(d, v, "distance", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["distance"] = t
		}
	}

	if v, ok := d.GetOk("name"); ok {

		t, err := expandSystemInterfaceName(d, v, "name", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["name"] = t
		}
	}

	if v, ok := d.GetOk("detectprotocol"); ok {

		t, err := expandSystemInterfaceDetectprotocol(d, v, "detectprotocol", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["detectprotocol"] = t
		}
	}

	if v, ok := d.GetOk("src_check"); ok {

		t, err := expandSystemInterfaceSrcCheck(d, v, "src_check", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["src-check"] = t
		}
	}

	if v, ok := d.GetOk("ipv6"); ok {

		t, err := expandSystemInterfaceIpv6(d, v, "ipv6", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["ipv6"] = t
		}
	}

	if v, ok := d.GetOk("dynamicgw"); ok {

		t, err := expandSystemInterfaceDynamicgw(d, v, "dynamicgw", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dynamicgw"] = t
		}
	}

	if v, ok := d.GetOk("mtu_override"); ok {

		t, err := expandSystemInterfaceMtuOverride(d, v, "mtu_override", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["mtu-override"] = t
		}
	}

	if v, ok := d.GetOk("mtu"); ok {

		t, err := expandSystemInterfaceMtu(d, v, "mtu", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["mtu"] = t
		}
	}

	if v, ok := d.GetOk("dynamic_dns1"); ok {

		t, err := expandSystemInterfaceDynamic_Dns1(d, v, "dynamic_dns1", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dynamic_dns1"] = t
		}
	}

	if v, ok := d.GetOk("alias"); ok {

		t, err := expandSystemInterfaceAlias(d, v, "alias", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["alias"] = t
		}
	}

	if v, ok := d.GetOk("auth_type"); ok {

		t, err := expandSystemInterfaceAuthType(d, v, "auth_type", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["auth-type"] = t
		}
	}

	if v, ok := d.GetOk("dynamic_dns2"); ok {

		t, err := expandSystemInterfaceDynamic_Dns2(d, v, "dynamic_dns2", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dynamic_dns2"] = t
		}
	}

	if v, ok := d.GetOk("status"); ok {

		t, err := expandSystemInterfaceStatus(d, v, "status", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["status"] = t
		}
	}

	if v, ok := d.GetOk("mode"); ok {

		t, err := expandSystemInterfaceMode(d, v, "mode", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["mode"] = t
		}
	}

	if v, ok := d.GetOk("ha_priority"); ok {

		t, err := expandSystemInterfaceHaPriority(d, v, "ha_priority", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["ha-priority"] = t
		}
	}

	if v, ok := d.GetOk("secondaryip"); ok || d.HasChange("secondaryip") {

		t, err := expandSystemInterfaceSecondaryip(d, v, "secondaryip", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["secondaryip"] = t
		}
	}

	if v, ok := d.GetOk("switch_members"); ok || d.HasChange("switch_members") {

		t, err := expandSystemInterfaceSwitchMembers(d, v, "switch_members", sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["switch-members"] = t
		}
	}

	return &obj, nil
}
